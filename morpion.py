class Board: def init(self): self.grid = [[' ' for _ in range(3)] for _ in range(3)]
def display(self): for row in self.grid: print('|'.join(row)) print('-' * 5) def place_symbol(self, row, col, symbol): if self.grid[row][col] == ' ': self.grid[row][col] = symbol return True return False def is_full(self): return all(cell != ' ' for row in self.grid for cell in row) def check_winner(self, symbol): # Vérification des lignes et des colonnes for i in range(3): if all(self.grid[i][j] == symbol for j in range(3)) or all(self.grid[j][i] == symbol for j in range(3)): return True # Vérification des diagonales if all(self.grid[i][i] == symbol for i in range(3)) or all(self.grid[i][2-i] == symbol for i in range(3)): return True return False 
class Player: def init(self, name, symbol): self.name = name self.symbol = symbol
def get_move(self): while True: try: row, col = map(int, input(f"{self.name} ({self.symbol}), entrez votre coup (ligne colonne) : ").split()) if 0 <= row < 3 and 0 <= col < 3: return row, col else: print("Entrée invalide, essayez encore.") except ValueError: print("Veuillez entrer deux nombres entiers entre 0 et 2.") 
class Game: def init(self): self.board = Board() self.players = [Player("Joueur 1", 'X'), Player("Joueur 2", 'O')] self.current_player = self.players[0]
def switch_player(self): self.current_player = self.players[1] if self.current_player == self.players[0] else self.players[0] def play(self): while True: self.board.display() row, col = self.current_player.get_move() if self.board.place_symbol(row, col, self.current_player.symbol): if self.board.check_winner(self.current_player.symbol): self.board.display() print(f"{self.current_player.name} a gagné !") break elif self.board.is_full(): self.board.display() print("Match nul !") break else: self.switch_player() else: print("Case déjà occupée, essayez un autre coup.") 
if name == "main": game = Game() game.play()
